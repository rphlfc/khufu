{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","web3","account","token","tokenBalance","khufu","totalBalance","accountBalance","isParticipating","a","this","loadWeb3","loadData","window","ethereum","Web3","on","location","reload","connect","currentProvider","alert","eth","net","getId","netId","getAccounts","accounts","setState","tokenData","GizaToken","networks","Contract","abi","address","methods","balanceOf","call","khufuData","Khufu","referral","join","send","from","value","utils","toWei","e","preventDefault","leave","request","method","content","balanceContent","connectionStatus","className","Button","variant","type","onClick","Alert","Heading","onSubmit","Form","Group","controlId","Label","Control","placeholder","ref","input","Navbar","bg","expand","Container","Brand","href","Toggle","aria-controls","Collapse","Text","Stack","gap","role","aria-label","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2622b6d8.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport GizaToken from './abis/GizaToken.json'\nimport Khufu from './abis/Khufu.json'\nimport Web3 from 'web3';\nimport Navbar from 'react-bootstrap/Navbar'\nimport Container from 'react-bootstrap/Container'\nimport Stack from 'react-bootstrap/Stack'\nimport Button from 'react-bootstrap/Button'\nimport Alert from 'react-bootstrap/Alert'\nimport Form from 'react-bootstrap/Form'\n\nimport './App.css';\n\nclass App extends Component {\n\n  async componentDidMount() {\n    await this.loadWeb3()\n    await this.loadData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      window.ethereum.on('accountsChanged', function () {\n          window.location.reload();\n      })\n      await this.connect();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    } else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadData() {\n    const web3 = window.web3\n    const netId = await web3.eth.net.getId()\n    const accounts = await web3.eth.getAccounts()\n    const account = accounts[0]\n\n    this.setState({ account, web3 })\n\n    const tokenData = GizaToken.networks[netId];\n    if (tokenData) {\n      const token = new web3.eth.Contract(GizaToken.abi, tokenData.address);\n      this.setState({ token })\n\n      const tokenBalance = await token.methods.balanceOf(account).call()\n      this.setState({ tokenBalance: (tokenBalance ? tokenBalance : 0) })\n    }\n\n    const khufuData = Khufu.networks[netId];\n    if (khufuData) {\n      const khufu = new web3.eth.Contract(Khufu.abi, khufuData.address)\n      this.setState({ khufu })\n\n      const totalBalance = await khufu.methods.totalBalance().call()\n      this.setState({ totalBalance })\n\n      const accountBalance = await khufu.methods.balanceOf(account).call()\n      this.setState({ accountBalance })\n\n      const isParticipating = await khufu.methods.isParticipating(account).call()\n      this.setState({ isParticipating })\n\n    } else {\n      window.alert('Contract not deployed to the current network')\n    }\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      web3: 'undefined',\n      account: '',\n      token: null,\n      tokenBalance: null,\n      khufu: null,\n      totalBalance: null,\n      accountBalance: null,\n      isParticipating: false\n    }\n  }\n\n  async join(referral) {\n    await this.state.khufu.methods.join(referral).send({ from: this.state.account, value: this.state.web3.utils.toWei('0.01', 'ether') })\n    window.location.reload();\n  }\n\n  async leave(e) {\n    e.preventDefault()\n    await this.state.khufu.methods.leave().send({ from: this.state.account })\n    window.location.reload();\n  }\n\n  async connect(e) {\n    //e.preventDefault()\n    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n    //setAccounts(accounts);\n    this.setState({ account: accounts[0] }) \n  }\n\n  render() {\n    let content\n    if (this.state.isParticipating) {\n      content = <div className='text-center'><br></br><Button variant=\"danger\" type=\"submit\" onClick={(e) => this.leave(e)}>LEAVE SCHEME</Button><br></br></div>\n    } else {\n      content = \n      <div>\n        <Alert variant=\"info\" className='text-center'>\n          <Alert.Heading>Referral address</Alert.Heading>\n          <p>This is the top of the pyramid address.<br></br>\n          0xDa14131E0239a98bB08c8484156b5B570BC4f92a</p>\n        </Alert>\n        <form className='text-center' onSubmit={(e) => {\n        e.preventDefault()\n        let referral = this.referral.value\n        this.join(referral)\n      }}>\n        <Form.Group className=\"mb-3\" controlId=\"referral\">\n          <Form.Label>Referral address</Form.Label>\n          <Form.Control type=\"text\" placeholder=\"Enter referral address\" ref={(input) => { this.referral = input }} />\n        </Form.Group>\n        <Button variant=\"success\" type=\"submit\">JOIN SCHEME</Button>\n      </form></div>\n    }\n\n    let balanceContent\n    if (this.state.isParticipating) {\n      balanceContent = \n      <div>\n        <span>Total balance of the scheme is { this.state.totalBalance } ETH</span><br></br>\n        <span>Your account balance in Khufu is { this.state.accountBalance } ETH</span>\n      </div>\n    } else {\n      balanceContent = <span>You're currently not participating in Khufu.</span>\n    }\n\n    let connectionStatus\n    if (!this.state.account) {\n      connectionStatus = <Button onClick={(e) => this.connect(e)}>CONNECT</Button>\n    }\n\n    return (\n      <div>\n        {/* <NavBar account={this.state.account} /> */}\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n          <Container>\n            <Navbar.Brand href=\"#home\">Khufu</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse className=\"justify-content-end\">\n              <Navbar.Text>\n                { this.state.account }\n              </Navbar.Text>\n              {connectionStatus}\n            </Navbar.Collapse>\n          </Container>\n        </Navbar>\n        <Container className=\"p-3\">\n          <Container className=\"p-5 mb-4 bg-light rounded-3\">\n            <h1 className='text-center' >Khufu - A Decentralized Crypto Pyramid Scheme</h1>\n            <hr></hr>\n            <Stack gap={1}>\n              <span>You have { this.state.tokenBalance } GIZA.</span>\n\n              {balanceContent}\n            </Stack><br></br>\n\n            {content}<br></br>\n\n            <Alert variant=\"danger\" className='text-center'>\n              <Alert.Heading>Attention</Alert.Heading>\n              <p>A pyramid is a fraudulent scheme and should be not be considered a valid investment strategy.<br></br>\n              This project was created for studying purposes only.</p>\n              <hr></hr>\n              <Alert.Heading>How it works?</Alert.Heading>\n              <p>In order to join the scheme you have to pay 0.01 ETH. Once in the scheme, 10% of your admission \n                payment (0.0001 ETH) will be fowarded to your referral address. By joining the scheme you automatically earn\n                1 GIZA. Think of the GIZA token as the merchandise that you get once you join a pyramid scheme.</p>\n              <p>In order to make real money you'd have to sell your GIZA token for more than you paid for it (0.0001 ETH).\n                But guess what, selling a GIZA token can be very difficult. You don't know where to sell or whom to sell it\n                to. Soon you'll realize that getting more people to join the scheme is a lot more profitable than selling the\n                merchandise (your GIZA tokens).</p>\n                <p>And there you have it, a pyramid scheme. You are going to need to talk people into joining the scheme and\n                  use your address as their referral address so you can earn your 10% fee from their admission payments.\n                </p>\n                <p>Any resemblance with the reality is mere coincidence. <span role=\"img\" aria-label=\"smile-emoji\">🙃 </span></p>\n                <Alert.Heading>Deployment</Alert.Heading>\n                <p>Khufu is deployed on the Kovan Test Network.</p>\n                <Alert.Heading>Get ETH</Alert.Heading>\n                <p>If you decide to test it you're going to need some ETH. You can get ETH direct to your wallet here {'->'} https://faucets.chain.link/kovan</p>\n            </Alert>\n          </Container>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}